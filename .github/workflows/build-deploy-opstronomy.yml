name: 'Build and Deploy '
on:
  workflow_dispatch:
    inputs:
      title:
        description: 'Title for the release'
        required: false
      description:
        description: 'Description for the release'
        required: false
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get GCP Kubernetes Autopilot cluster credentials
      uses: google-github-actions/get-gke-credentials@v0.3.0
      with:
        cluster_name: ${{ secrets.GCP_CLUSTER_NAME }}
        location: ${{ secrets.GCP_CLUSTER_REGION }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

        name: 'Build and Deploy '
        on:
          workflow_dispatch:
            inputs:
              title:
                description: 'Title for the release'
                required: false
              description:
                description: 'Description for the release'
                required: false
        jobs:
          deploy:
            runs-on: ubuntu-latest
        
            steps:
            - name: Checkout code
              uses: actions/checkout@v2
        
            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v0.2.1
              with:
                project_id: ${{ secrets.GCP_PROJECT_ID }}
                service_account_key: ${{ secrets.GCP_SA_KEY }}
                export_default_credentials: true
        
            - name: Get GCP Kubernetes Autopilot cluster credentials
              uses: google-github-actions/get-gke-credentials@v0.3.0
              with:
                cluster_name: ${{ secrets.GCP_CLUSTER_NAME }}
                location: ${{ secrets.GCP_CLUSTER_REGION }}
                project_id: ${{ secrets.GCP_PROJECT_ID }}
        
            - name: Create deployment if it doesn't exist
              run: |
               if ! kubectl get deployments/my-app; then
                kubectl create deployment my-app --image=${{ secrets.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/my-app:latest
              fi
        
            - name: Deploy new version to GCP Kubernetes Autopilot
              run: |
               kubectl set image deployment/my-app my-app=${{ secrets.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/my-app:latest